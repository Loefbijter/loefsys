# Generated by Django 5.1.5 on 2025-03-10 09:58

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django_extensions.db.fields
import loefsys.users.models.user
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('groups', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('first_name', models.CharField(max_length=64, verbose_name='First name')),
                ('last_name', models.CharField(max_length=64, verbose_name='Last name')),
                ('initials', models.CharField(blank=True, max_length=20, verbose_name='Initials')),
                ('nickname', models.CharField(blank=True, max_length=30, verbose_name='Nickname')),
                ('display_name_preference', models.PositiveSmallIntegerField(choices=[(0, 'Show full name'), (1, 'Show full name with nickname'), (2, 'Show the nickname and last name'), (3, 'Show only the initials and the last name'), (4, 'Show only the first name'), (5, 'Show only the nickname')], default=0)),
                ('display_name', models.GeneratedField(db_persist=True, expression=models.Case(models.When(display_name_preference=1, then=django.db.models.functions.text.Concat(models.F('first_name'), models.Value(" '"), models.F('nickname'), models.Value("' "), models.F('last_name'))), models.When(display_name_preference=2, then=django.db.models.functions.text.Concat(models.F('nickname'), models.Value(' '), models.F('last_name'))), models.When(display_name_preference=3, then=django.db.models.functions.text.Concat(models.F('initials'), models.Value(' '), models.F('last_name'))), models.When(display_name_preference=4, then=models.F('first_name')), models.When(display_name_preference=5, then=models.F('nickname')), default=django.db.models.functions.text.Concat(models.F('first_name'), models.Value(' '), models.F('last_name'))), output_field=models.CharField(max_length=128))),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('note', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='groups.loefbijtergroup', verbose_name='Groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('manager', loefsys.users.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('street', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Please use the format <street> <number>', regex='^.+ \\d+.*')], verbose_name='Street and house number')),
                ('street2', models.CharField(max_length=100, verbose_name='Second address line')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal code')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('country', models.CharField(max_length=50)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MemberDetails',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='member', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gender', models.PositiveSmallIntegerField(choices=[(0, 'Other'), (1, 'Prefer not to say'), (2, 'Male'), (3, 'Female')], verbose_name='Gender')),
                ('birthday', models.DateField(verbose_name='Birthday')),
                ('show_birthday', models.BooleanField(verbose_name='Display birthday')),
                ('address', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='loefusers.address')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudyRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('institution', models.CharField(max_length=32, verbose_name='Educational institution')),
                ('programme', models.CharField(max_length=32, verbose_name='Study programme')),
                ('student_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter a valid student- or e/z/u-number.', regex='(s\\d{7}|[ezu]\\d{6,7})')], verbose_name='Student number')),
                ('rsc_number', models.CharField(blank=True, max_length=10, verbose_name='RSC card number')),
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='study_registration', to='loefusers.memberdetails')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_type', models.PositiveSmallIntegerField(choices=[(0, 'Active membership'), (1, 'Passive membership'), (2, 'Active exceptional membership'), (3, 'Passive exceptional membership'), (4, 'Alumnus')], default=0, verbose_name='Membership type')),
                ('start', models.DateField(default=datetime.date.today, help_text="The date the member's membership started", verbose_name='Membership start')),
                ('end', models.DateField(blank=True, default=None, help_text="The date the member's membership ends/ended.", null=True, verbose_name='Membership end')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='loefusers.memberdetails', verbose_name='Member')),
            ],
        ),
    ]
