# Generated by Django 5.1.5 on 2025-06-23 21:06

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BooleanRegistrationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='last changed')),
                ('value', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatetimeRegistrationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='last changed')),
                ('value', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Active'), (1, 'In queue'), (2, 'Cancelled'), (3, 'Cancelled and fined')], verbose_name='Status')),
                ('price_at_registration', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='Price')),
                ('fine_at_registration', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='Fine')),
                ('costs', models.GeneratedField(db_persist=True, expression=models.Case(models.When(status=0, then=models.F('price_at_registration')), models.When(status=3, then=models.F('fine_at_registration')), default=Decimal('0.00')), output_field=models.DecimalField(decimal_places=2, max_digits=5))),
                ('costs_paid', models.DecimalField(blank=True, decimal_places=2, max_digits=5, verbose_name='Costs paid')),
            ],
        ),
        migrations.CreateModel(
            name='IntegerRegistrationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='last changed')),
                ('value', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegistrationFormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('boolean', 'Boolean'), ('integer', 'Integer'), ('text', 'Text'), ('datetime', 'Datetime')], default='text', max_length=20, verbose_name='Type')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('required', models.BooleanField(default=True, verbose_name='Required')),
            ],
        ),
        migrations.CreateModel(
            name='TextRegistrationInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed', models.DateTimeField(auto_now=True, verbose_name='last changed')),
                ('value', models.TextField(blank=True, default='', max_length=4096)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='title', verbose_name='slug')),
                ('start', models.DateTimeField(verbose_name='Start time')),
                ('end', models.DateTimeField(verbose_name='End time')),
                ('registration_start', models.DateTimeField(blank=True, null=True, verbose_name='Start of registration window')),
                ('registration_deadline', models.DateTimeField(blank=True, null=True, verbose_name='Registration deadline')),
                ('cancelation_deadline', models.DateTimeField(blank=True, null=True, verbose_name='Cancelation deadline')),
                ('category', models.PositiveSmallIntegerField(choices=[(0, 'Other'), (1, 'Alumni'), (2, 'Association'), (3, 'Competition'), (4, 'Leisure'), (5, 'Sailing'), (6, 'Training')], verbose_name='Category')),
                ('capacity', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Maximum number of participants')),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Price')),
                ('fine', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Fine if participant does not show up.', max_digits=5, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Fine')),
                ('location', models.CharField(max_length=255, verbose_name='Location')),
                ('is_open_event', models.BooleanField(default=False, help_text='Event is open for non-members')),
                ('published', models.BooleanField(default=False, verbose_name='Published')),
                ('send_cancel_email', models.BooleanField(default=True, help_text='Send an email to the organising party when a member cancels their registration after the deadline.', verbose_name='Send cancellation notifications')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('end__gt', models.F('start'))), name='event_end_gt_start', violation_error_message='End time cannot be before the start time.'), models.CheckConstraint(condition=models.Q(('start__gt', models.F('registration_deadline'))), name='event_start_gt_reg_end', violation_error_message="registration deadline can't be after start."), models.CheckConstraint(condition=models.Q(('start__gt', models.F('cancelation_deadline'))), name='event_start_gt_can_end', violation_error_message="cancelation deadline can't be after start."), models.CheckConstraint(condition=models.Q(('registration_deadline__gt', models.F('registration_start'))), name='reg_end_gt_reg_start', violation_error_message="start of registration can't be after the end."), models.CheckConstraint(condition=models.Q(('cancelation_deadline__gt', models.F('registration_start'))), name='can_end_gt_reg_start', violation_error_message="cancelation can't be before registration opens")],
            },
        ),
        migrations.CreateModel(
            name='EventOrganizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='events.event', verbose_name='Event')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
